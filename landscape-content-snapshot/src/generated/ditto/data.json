{
  "Version": 1,
  "Id": "ditto",
  "Name": "Ditto",
  "Description": "Ditto is the only edge-native, mobile database that can consistently support your business anytime, anywhere. Edge-native solutions are built specifically to thrive on mobile and edge devices, without relying solely on cloud-based services.",
  "MaturityLevel": "Production-Ready",
  "Website": "https://www.ditto.com",
  "GitHub": "https://github.com/getditto",
  "GetStarted": "https://docs.ditto.live/home/introduction#sdk-quickstart-guides",
  "InitialReleaseDate": "2019-04-30T00:00:00.000Z",
  "Deployment": [
    "Self-hosted",
    "Hosted"
  ],
  "License": "Proprietary",
  "AppTarget": {
    "Platform": {
      "data": [
        "Browser",
        "iOS",
        "Android",
        "macOS",
        "Linux",
        "Windows",
        "WASM"
      ],
      "comment": "The various Ditto Edge SDKs may or may not suppport all environments listed. Other platforms are in development."
    },
    "LanguageSDK": {
      "data": [
        "Swift",
        "Kotlin - Android",
        "Java - Server",
        "Java - Android",
        "Dart",
        "React Native",
        "JavaScript Web",
        "C# - .NET",
        "Rust",
        "C++"
      ],
      "comment": ""
    },
    "FrameworkIntegrations": {
      "data": [
        "React Native",
        "Flutter",
        ".NET Maui",
        "Jetpack Compose",
        "SwiftUI"
      ]
    }
  },
  "Networking": {
    "Protocol": {
      "data": [
        "WiFi LAN",
        "Bluetooth",
        "P2P WiFi",
        "TCP",
        "HTTP",
        "WebSockets"
      ],
      "comment": "We've developed an intelligent sync system that automatically discovers local devices, establishes a connection, and seamlessly switches between active transports when syncing data (Bluetooth, P2P WiFi, LAN, Websockets) so that if one transport goes down, it automatically switches to the next best one, optimizing for speed. \"Resilient Networking\" in this context means networking that can network in any environment and dynamically \"heal\" itself if connections break"
    },
    "Topology": {
      "data": "Mesh Network"
    }
  },
  "ServerSideData": {
    "PersistenceMechanism": {
      "data": [
        "Custom"
      ]
    },
    "DataSize": {
      "data": "No theoretical limit",
      "comment": "No theoretical limit, due to cloud scaling, but we offer benchmarking and performance services to validate & scale cloud resources for larger use cases."
    },
    "DataModelParadigm": {
      "data": "Document"
    },
    "ExistingDatabaseSupport": {
      "data": "HTTP/Webhooks and real-time via CDC Connectors (Kafka-based)"
    }
  },
  "ClientSideData": {
    "QueryAPI": {
      "data": [
        "Async",
        "Reactive queries"
      ]
    },
    "LocalRefreshLatency": {
      "data": "10ms-2s",
      "comment": "Depends on cardinality, query optimization plan, and local data size."
    },
    "PersistenceMechanism": {
      "data": [
        "SQLite"
      ]
    },
    "PersistenceFeatures": {
      "data": "Indexes"
    },
    "DataModel": {
      "data": "Document",
      "comment": "Queries are SQL, records are document-oriented."
    },
    "OfflineReads": {
      "data": "Full Support",
      "comment": "Dynamic query support."
    },
    "OptimisticUpdates": {
      "data": "Yes"
    },
    "OfflineWrites": {
      "data": "Full local conflict resolution"
    },
    "DataSize": {
      "data": "up to the size of the hard drive"
    }
  },
  "SynchronizationStrategy": {
    "FullOrPartialReplication": {
      "data": [
        "Full Replication",
        "Partial Replication"
      ],
      "comment": "Defined using [subscriptions](https://docs.ditto.live/key-concepts/syncing-data).  Supports flexible [authorization](https://docs.ditto.live/key-concepts/authentication-and-authorization) model."
    },
    "ConflictHandling": {
      "data": "Automatic via CRDT",
      "comment": "All changes are recorded and conflicts are resolved automatically"
    },
    "WhereResolutionOccurs": {
      "data": "Client"
    },
    "WhatGetsSynced": {
      "data": {
        "ClientToClient": "document deltas"
      },
      "comment": "Ditto has client-to-client deltas, and the server is running the same CRDT as the client, and is not required."
    },
    "Authority": {
      "data": "Decentralized",
      "comment": "Decentralized via authentication servers."
    }
  },
  "AuthIdentity": {
    "Encryption": {
      "data": "Built-in e2ee"
    },
    "AuthenticationMethod": {
      "data": [
        "JWT Tokens"
      ]
    },
    "AuthorizationPermissions": {
      "data": "Custom-mapped ACLs"
    }
  },
  "UIRelated": {
    "Components": {
      "data": [
        "Presence"
      ],
      "comment": "SDK provides which peers you are connected to, and over what transports."
    }
  },
  "DevelopmentWorkflowsDX": {
    "DebuggingTools": {
      "data": [
        "DevTools",
        "Data Inspector",
        "Network Inspector"
      ],
      "comment": "Open source debugging and diagnostic tools for developers."
    }
  },
  "__generated": {
    "lastUpdated": "2025-04-30T15:39:55.000Z"
  }
}